" We start by installing Vim plugin manager to manage plugins.
" A Lot of customizations done here.
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    "    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" File explorer
Plug 'preservim/nerdtree'

" LSP for C#
Plug 'OmniSharp/omnisharp-vim'

" Code completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" UI
Plug 'flazz/vim-colorschemes'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ervandew/supertab'
Plug 'prettier/vim-prettier', { 'do': 'npm install' , 'branch' : 'release/1.x' }
Plug 'dense-analysis/ale'
"Fuzzy Search
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Plug 'valloric/MatchTagAlways'
Plug 'jiangmiao/auto-pairs'
Plug 'fidian/hexmode'
Plug 'tpope/vim-surround'
call plug#end()

:map <C-n> :NERDTreeToggle<CR>
:map <C-p> :GFiles<CR>
:map <C-f> :Files<CR>
"collapse json files by themselves.
:map <C-j> :set filetype=json \| :syntax on \| :set foldmethod=syntax
"zo for open
"zc for close

" Auto indent your file.
map <F7> gg=G<C-o><C-o>
" Navigate Tabs
map <C-t><up> :tabr<cr>
map <C-t><down> :tabl<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>

" OminiSharp configuration
"
" Don't autoselect first omnicomplete option, show options even if there is
" only
" one (so the preview documentation is accessible). Remove 'preview' if you
" don't want to see any documentation whatsoever.
set completeopt=longest,menuone,preview

" Set desired preview window height for viewing documentation.
" You might also want to look at the echodoc plugin.
set previewheight=5

" Use the stdio OmniSharp-roslyn server
let g:OmniSharp_server_stdio = 1

let g:OmniSharp_server_use_net6 = 1
" let g:OmniSharp_server_use_mono = 0
let g:OmniSharp_timeout = 5
let g:omnicomplete_fetch_full_documentation = 1
let g:OmniSharp_autoselect_existing_sln = 1
let g:OmniSharp_popup_position = 'peek'
if has('nvim')
    let g:OmniSharp_popup_options = {
                \ 'winhl': 'Normal:NormalFloat,FloatBorder:ModeMsg',
                \ 'border': 'rounded'
                \}
else
    let g:OmniSharp_popup_options = {
                \ 'highlight': 'Normal',
                \ 'padding': [0],
                \ 'border': [1],
                \ 'borderchars': ['─', '│', '─', '│', '╭', '╮', '╯', '╰'],
                \ 'borderhighlight': ['ModeMsg']
                \}
endif
let g:OmniSharp_popup_mappings = {
            \ 'sigNext': '<C-n>',
            \ 'sigPrev': '<C-p>',
            \ 'pageDown': ['<C-f>', '<PageDown>'],
            \ 'pageUp': ['<C-b>', '<PageUp>']
            \}
let g:OmniSharp_highlighting = 3
let g:OmniSharp_diagnostic_exclude_paths = [
            \ 'obj\\',
            \ '[Tt]emp\\',
            \ '\.nuget\\',
            \ '\<AssemblyInfo\.cs\>'
            \]
" Update semantic highlighting on BufEnter and InsertLeave
let g:OmniSharp_highlight_types = 2
let g:OmniSharp_highlight_groups = {
            \ 'ExcludedCode': 'NonText'
            \}

augroup omnisharp_commands
    autocmd!

    " Show type information automatically when the cursor stops moving.
    " Note that the type is echoed to the Vim command line, and will overwrite
    " any other messages in this space including e.g. ALE linting messages.
    autocmd CursorHold *.cs OmniSharpTypeLookup

    autocmd FileType cs noremap <buffer> <F12>d :OmniSharpGotoDefinition<CR> 
    autocmd FileType cs noremap <buffer> <Leader><Space> :OmniSharpGetCodeActions<CR> 
    autocmd FileType cs xnoremap <buffer> <Leader><Space> :call OmniSharp#GetCodeActions('visual')<CR>
    autocmd FileType cs noremap <buffer> <Leader>pd :OmniSharpPreviewDefinition<CR>
    autocmd FileType cs noremap <buffer> <Leader>pi :OmniSharpPreviewImplementation<CR>
    autocmd FileType cs noremap <buffer> <F2> :OmniSharpRename<CR>
    autocmd FileType cs noremap <buffer> <Leader>cf :OmniSharpCodeFormat<CR>
    autocmd FileType cs noremap <buffer> <F12>i :OmniSharpFindImplementations<CR>
    autocmd FileType cs noremap <buffer> <F12>s :OmniSharpFindSymbol<CR>
    autocmd FileType cs noremap <buffer> <F12>u :OmniSharpFindUsages<CR>
    autocmd FileType cs noremap <buffer> <S-D> :OmniSharpDocumentation<CR>
    autocmd FileType cs noremap <buffer> <Leader>cc :OmniSharpGlobalCodeCheck<CR>
    autocmd FileType cs noremap <buffer> <Leader>rt :OmniSharpRunTest<CR>
    autocmd FileType cs noremap <buffer> <Leader>rT :OmniSharpRunTestsInFile<CR>
    autocmd FileType cs noremap <buffer> <Leader>ss :OmniSharpStartServer<CR>
    autocmd FileType cs noremap <buffer> <Leader>sp :OmniSharpStopServer<CR>
    autocmd FileType cs nnoremap <buffer> <C-Space> :OmniSharpSignatureHelp<CR> 
    autocmd FileType cs inoremap <buffer> <C-\> <C-o>:OmniSharpSignatureHelp<CR>
    autocmd BufWritePre *.cs :OmniSharpCodeFormat
augroup END

autocmd FileType ts nmap <silent> gd :call CocActionAsync('jumpDefinition')<CR>
autocmd FileType html nmap <silent> gd :call CocActionAsync('jumpDefinition')<CR>


" The following commands are contextual, based on the cursor position.
" autocmd FileType cs nnoremap <buffer>
" autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>
let g:vimspector_enable_mappings = 'HUMAN'
let g:airline_powerline_fonts=1
let g:tmuxline_powerline_separators = 0
" set background=dark
"colorscheme Monokai
colorscheme minimalist
let g:airline_theme='minimalist'
set number
set relativenumber
" Toggle relative line number
nmap <C-L><C-L> :set norelativenumber<CR>
map  <C-R><C-L> :set relativenumber<CR>

set encoding=utf-8
scriptencoding utf-8
let g:airline#extensions#tmuxline#enabled = 0

" How tab behaves while picking auto complete.
let g:SuperTabMappingForward = '<S-Tab>'
let g:SuperTabMappingBackward = '<Tab>'

:set tabstop=4
:set shiftwidth=4
:set expandtab

set clipboard+=unnamedplus
" Move Swap Directory to something temporary.
set directory^=$HOME/tempswap//

" This directory should exist.
" Always enable preview window on the right with 60% width
let g:fzf_preview_window = 'right:60%'

" vim wiki settings.
set nocompatible
filetype plugin on
syntax on
let g:vimwiki_list = [{'path': '~/vimwiki/',
            \ 'syntax': 'markdown', 'ext': '.md'}]


if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    "   let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
" ctrl+p when you move to a file this highlights it.
let g:nerdtree_sync_cursorline = 1


" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

" The roslyn server releases come with an embedded Mono, but this can be
" overridden to use the installed Mono by setting g:OmniSharp_server_use_mono

" Read gitignore and dont show relevant files in ctrlp.
" let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:prettier#config#parser = 'babylon'
" hi Normal ctermbg=none
"
" For Coc Action Menu to work.
" Remap for do codeAction of selected region
function! s:cocActionsOpenFromSelected(type) abort
    execute 'CocCommand actions.open ' . a:type
endfunction
xmap <silent> <leader>a :<C-u>execute 'CocCommand actions.open ' . visualmode()<CR>
nmap <silent> <leader>a :<C-u>set operatorfunc=<SID>cocActionsOpenFromSelected<CR>g@

let g:ale_linters_ignore = {
            \   'typescript': ['tslint'],
            \}

let g:ale_linters = {
            \ 'cs': ['OmniSharp']
            \}

set mouse=a

nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
